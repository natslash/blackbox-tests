syntax = "proto3";

package com.axoom.test.qrecords;


service QRecords {
    // GetStream returns an unbounded data stream for the requested data composition. The stream endures at max. 30 min.
    rpc GetStream (RecordStreamRequest) returns (stream QRecord);

    // GetMaterialized returns the materialized view of the requested data composition
    rpc GetMaterialized (RecordRequest) returns (QRecord);

    // ListHistorical returns a bounded data stream for the requested data composition.
    // The stream ends either when the specified limit exceeded or when there are no more records stored in the specified time range.
    rpc ListHistorical (RecordListRequest) returns (stream QRecord);

    // GetLatestHistorical returns the latest historical known record
    rpc GetLatestHistorical (RecordRequest) returns (QRecord);
}

import "google/protobuf/timestamp.proto";
message RecordStreamRequest {
    string groupId = 1; // Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
    string dataCompositionId = 2; // The unique data composition ID
    google.protobuf.Timestamp from = 3; // From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
    uint32 timeout = 4; // Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
}

message RecordRequest {
    string dataCompositionId = 1; // The unique data composition ID
}

message RecordListRequest {
    string clientId = 1; // The client's ID; used for record load-balancing
    string dataCompositionId = 2; // The unique data composition ID
    google.protobuf.Timestamp from = 3; // The exclusive starting point in nano seconds precision
    google.protobuf.Timestamp to = 4; // The inclusive ending point in nano seconds precision
    int32 limit = 5; // When the limit hits the stream will end
}

message QRecord {
    QRecordHeader headers = 1;
    bytes payload = 2;
}

message QRecordHeader {
    string recordId = 1; // The unique record ID
    string dataCompositionId = 2; // The unique data composition ID
    string owner = 3; // The owner of the data composition
    string schemaUrl = 4; // The url where the schema is located
    string timestamp = 5; // Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
}
