// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qrecords.proto

package com.axoom.qrecords;

import com.google.protobuf.ExtensionRegistry;
import java.io.*;
import java.nio.*;
import com.google.protobuf.*;
import com.google.protobuf.Descriptors.Descriptor;
import com.google.protobuf.Descriptors.FieldDescriptor;
import com.google.protobuf.Descriptors.FileDescriptor;
import com.google.protobuf.Descriptors.OneofDescriptor;

public final class Qrecords {
  private Qrecords() {}
  public static void registerAllExtensions(
      ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      ExtensionRegistry registry) {
    registerAllExtensions(
        (ExtensionRegistryLite) registry);
  }
  public interface RecordStreamRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.axoom.qrecords.RecordStreamRequest)
      MessageOrBuilder {

    /**
     * <pre>
     * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
     * </pre>
     *
     * <code>string groupId = 1;</code>
     */
    String getGroupId();
    /**
     * <pre>
     * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
     * </pre>
     *
     * <code>string groupId = 1;</code>
     */
    ByteString
        getGroupIdBytes();

    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    String getDataCompositionId();
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    ByteString
        getDataCompositionIdBytes();

    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    boolean hasFrom();
    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    Timestamp getFrom();
    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    TimestampOrBuilder getFromOrBuilder();

    /**
     * <pre>
     * Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
     * </pre>
     *
     * <code>uint32 timeout = 4;</code>
     */
    int getTimeout();
  }
  /**
   * Protobuf type {@code com.axoom.qrecords.RecordStreamRequest}
   */
  public  static final class RecordStreamRequest extends
      GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.axoom.qrecords.RecordStreamRequest)
      RecordStreamRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecordStreamRequest.newBuilder() to construct.
    private RecordStreamRequest(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecordStreamRequest() {
      groupId_ = "";
      dataCompositionId_ = "";
      timeout_ = 0;
    }

    @Override
    public final UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecordStreamRequest(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              groupId_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              dataCompositionId_ = s;
              break;
            }
            case 26: {
              Timestamp.Builder subBuilder = null;
              if (from_ != null) {
                subBuilder = from_.toBuilder();
              }
              from_ = input.readMessage(Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(from_);
                from_ = subBuilder.buildPartial();
              }

              break;
            }
            case 32: {

              timeout_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (IOException e) {
        throw new InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptor
        getDescriptor() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor;
    }

    protected   FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordStreamRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Qrecords.RecordStreamRequest.class, Qrecords.RecordStreamRequest.Builder.class);
    }

    public static final int GROUPID_FIELD_NUMBER = 1;
    private volatile Object groupId_;
    /**
     * <pre>
     * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
     * </pre>
     *
     * <code>string groupId = 1;</code>
     */
    public String getGroupId() {
      Object ref = groupId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        groupId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
     * </pre>
     *
     * <code>string groupId = 1;</code>
     */
    public ByteString
        getGroupIdBytes() {
      Object ref = groupId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        groupId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int DATACOMPOSITIONID_FIELD_NUMBER = 2;
    private volatile Object dataCompositionId_;
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public String getDataCompositionId() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        dataCompositionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public ByteString
        getDataCompositionIdBytes() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        dataCompositionId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int FROM_FIELD_NUMBER = 3;
    private Timestamp from_;
    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public boolean hasFrom() {
      return from_ != null;
    }
    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public Timestamp getFrom() {
      return from_ == null ? Timestamp.getDefaultInstance() : from_;
    }
    /**
     * <pre>
     * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public TimestampOrBuilder getFromOrBuilder() {
      return getFrom();
    }

    public static final int TIMEOUT_FIELD_NUMBER = 4;
    private int timeout_;
    /**
     * <pre>
     * Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
     * </pre>
     *
     * <code>uint32 timeout = 4;</code>
     */
    public int getTimeout() {
      return timeout_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws IOException {
      if (!getGroupIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 1, groupId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 2, dataCompositionId_);
      }
      if (from_ != null) {
        output.writeMessage(3, getFrom());
      }
      if (timeout_ != 0) {
        output.writeUInt32(4, timeout_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getGroupIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(1, groupId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(2, dataCompositionId_);
      }
      if (from_ != null) {
        size += CodedOutputStream
          .computeMessageSize(3, getFrom());
      }
      if (timeout_ != 0) {
        size += CodedOutputStream
          .computeUInt32Size(4, timeout_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Qrecords.RecordStreamRequest)) {
        return super.equals(obj);
      }
      Qrecords.RecordStreamRequest other = (Qrecords.RecordStreamRequest) obj;

      boolean result = true;
      result = result && getGroupId()
          .equals(other.getGroupId());
      result = result && getDataCompositionId()
          .equals(other.getDataCompositionId());
      result = result && (hasFrom() == other.hasFrom());
      if (hasFrom()) {
        result = result && getFrom()
            .equals(other.getFrom());
      }
      result = result && (getTimeout()
          == other.getTimeout());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + GROUPID_FIELD_NUMBER;
      hash = (53 * hash) + getGroupId().hashCode();
      hash = (37 * hash) + DATACOMPOSITIONID_FIELD_NUMBER;
      hash = (53 * hash) + getDataCompositionId().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      hash = (37 * hash) + TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getTimeout();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Qrecords.RecordStreamRequest parseFrom(
        ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordStreamRequest parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordStreamRequest parseFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordStreamRequest parseDelimitedFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Qrecords.RecordStreamRequest parseDelimitedFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        CodedInputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordStreamRequest parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Qrecords.RecordStreamRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.axoom.qrecords.RecordStreamRequest}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.axoom.qrecords.RecordStreamRequest)
        Qrecords.RecordStreamRequestOrBuilder {
      public static final Descriptor
          getDescriptor() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor;
      }

      protected GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordStreamRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Qrecords.RecordStreamRequest.class, Qrecords.RecordStreamRequest.Builder.class);
      }

      // Construct using Qrecords.RecordStreamRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        groupId_ = "";

        dataCompositionId_ = "";

        if (fromBuilder_ == null) {
          from_ = null;
        } else {
          from_ = null;
          fromBuilder_ = null;
        }
        timeout_ = 0;

        return this;
      }

      public Descriptor
          getDescriptorForType() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor;
      }

      public Qrecords.RecordStreamRequest getDefaultInstanceForType() {
        return Qrecords.RecordStreamRequest.getDefaultInstance();
      }

      public Qrecords.RecordStreamRequest build() {
        Qrecords.RecordStreamRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Qrecords.RecordStreamRequest buildPartial() {
        Qrecords.RecordStreamRequest result = new Qrecords.RecordStreamRequest(this);
        result.groupId_ = groupId_;
        result.dataCompositionId_ = dataCompositionId_;
        if (fromBuilder_ == null) {
          result.from_ = from_;
        } else {
          result.from_ = fromBuilder_.build();
        }
        result.timeout_ = timeout_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(Message other) {
        if (other instanceof Qrecords.RecordStreamRequest) {
          return mergeFrom((Qrecords.RecordStreamRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Qrecords.RecordStreamRequest other) {
        if (other == Qrecords.RecordStreamRequest.getDefaultInstance()) return this;
        if (!other.getGroupId().isEmpty()) {
          groupId_ = other.groupId_;
          onChanged();
        }
        if (!other.getDataCompositionId().isEmpty()) {
          dataCompositionId_ = other.dataCompositionId_;
          onChanged();
        }
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.getTimeout() != 0) {
          setTimeout(other.getTimeout());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws IOException {
        Qrecords.RecordStreamRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (Qrecords.RecordStreamRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object groupId_ = "";
      /**
       * <pre>
       * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
       * </pre>
       *
       * <code>string groupId = 1;</code>
       */
      public String getGroupId() {
        Object ref = groupId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          groupId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
       * </pre>
       *
       * <code>string groupId = 1;</code>
       */
      public ByteString
          getGroupIdBytes() {
        Object ref = groupId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          groupId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
       * </pre>
       *
       * <code>string groupId = 1;</code>
       */
      public Builder setGroupId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        groupId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
       * </pre>
       *
       * <code>string groupId = 1;</code>
       */
      public Builder clearGroupId() {
        
        groupId_ = getDefaultInstance().getGroupId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Stream subscriber can be grouped to share workload. Each record is delivered to one subscriber instance within the group. Consumer instances can be in separate processes or on separate machines.
       * </pre>
       *
       * <code>string groupId = 1;</code>
       */
      public Builder setGroupIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        groupId_ = value;
        onChanged();
        return this;
      }

      private Object dataCompositionId_ = "";
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public String getDataCompositionId() {
        Object ref = dataCompositionId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          dataCompositionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public ByteString
          getDataCompositionIdBytes() {
        Object ref = dataCompositionId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          dataCompositionId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dataCompositionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder clearDataCompositionId() {
        
        dataCompositionId_ = getDefaultInstance().getDataCompositionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dataCompositionId_ = value;
        onChanged();
        return this;
      }

      private Timestamp from_ = null;
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> fromBuilder_;
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public boolean hasFrom() {
        return fromBuilder_ != null || from_ != null;
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Timestamp getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? Timestamp.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder setFrom(Timestamp value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
          onChanged();
        } else {
          fromBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder setFrom(
          Timestamp.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
          onChanged();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder mergeFrom(Timestamp value) {
        if (fromBuilder_ == null) {
          if (from_ != null) {
            from_ =
              Timestamp.newBuilder(from_).mergeFrom(value).buildPartial();
          } else {
            from_ = value;
          }
          onChanged();
        } else {
          fromBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder clearFrom() {
        if (fromBuilder_ == null) {
          from_ = null;
          onChanged();
        } else {
          from_ = null;
          fromBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Timestamp.Builder getFromBuilder() {
        
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public TimestampOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              Timestamp.getDefaultInstance() : from_;
        }
      }
      /**
       * <pre>
       * From when to start the stream (Default UTC Now). Earliest is 7 days in the past from now. Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new SingleFieldBuilderV3<
              Timestamp, Timestamp.Builder, TimestampOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private int timeout_ ;
      /**
       * <pre>
       * Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
       * </pre>
       *
       * <code>uint32 timeout = 4;</code>
       */
      public int getTimeout() {
        return timeout_;
      }
      /**
       * <pre>
       * Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
       * </pre>
       *
       * <code>uint32 timeout = 4;</code>
       */
      public Builder setTimeout(int value) {
        
        timeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the duration (in seconds) after which the stream will be closed (max. 1800 = 30 min)
       * </pre>
       *
       * <code>uint32 timeout = 4;</code>
       */
      public Builder clearTimeout() {
        
        timeout_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.axoom.qrecords.RecordStreamRequest)
    }

    // @@protoc_insertion_point(class_scope:com.axoom.qrecords.RecordStreamRequest)
    private static final Qrecords.RecordStreamRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Qrecords.RecordStreamRequest();
    }

    public static Qrecords.RecordStreamRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<RecordStreamRequest>
        PARSER = new AbstractParser<RecordStreamRequest>() {
      public RecordStreamRequest parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new RecordStreamRequest(input, extensionRegistry);
      }
    };

    public static Parser<RecordStreamRequest> parser() {
      return PARSER;
    }

    @Override
    public Parser<RecordStreamRequest> getParserForType() {
      return PARSER;
    }

    public Qrecords.RecordStreamRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RecordRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.axoom.qrecords.RecordRequest)
      MessageOrBuilder {

    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 1;</code>
     */
    String getDataCompositionId();
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 1;</code>
     */
    ByteString
        getDataCompositionIdBytes();
  }
  /**
   * Protobuf type {@code com.axoom.qrecords.RecordRequest}
   */
  public  static final class RecordRequest extends
      GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.axoom.qrecords.RecordRequest)
      RecordRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecordRequest.newBuilder() to construct.
    private RecordRequest(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecordRequest() {
      dataCompositionId_ = "";
    }

    @Override
    public final UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecordRequest(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              dataCompositionId_ = s;
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (IOException e) {
        throw new InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptor
        getDescriptor() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordRequest_descriptor;
    }

    protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Qrecords.RecordRequest.class, Qrecords.RecordRequest.Builder.class);
    }

    public static final int DATACOMPOSITIONID_FIELD_NUMBER = 1;
    private volatile Object dataCompositionId_;
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 1;</code>
     */
    public String getDataCompositionId() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        dataCompositionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 1;</code>
     */
    public ByteString
        getDataCompositionIdBytes() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        dataCompositionId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws IOException {
      if (!getDataCompositionIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 1, dataCompositionId_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getDataCompositionIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(1, dataCompositionId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Qrecords.RecordRequest)) {
        return super.equals(obj);
      }
      Qrecords.RecordRequest other = (Qrecords.RecordRequest) obj;

      boolean result = true;
      result = result && getDataCompositionId()
          .equals(other.getDataCompositionId());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATACOMPOSITIONID_FIELD_NUMBER;
      hash = (53 * hash) + getDataCompositionId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Qrecords.RecordRequest parseFrom(
        ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordRequest parseFrom(
        ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordRequest parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordRequest parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordRequest parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordRequest parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordRequest parseFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordRequest parseFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordRequest parseDelimitedFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Qrecords.RecordRequest parseDelimitedFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordRequest parseFrom(
        CodedInputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordRequest parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Qrecords.RecordRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.axoom.qrecords.RecordRequest}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.axoom.qrecords.RecordRequest)
        Qrecords.RecordRequestOrBuilder {
      public static final Descriptor
          getDescriptor() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordRequest_descriptor;
      }

      protected GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Qrecords.RecordRequest.class, Qrecords.RecordRequest.Builder.class);
      }

      // Construct using Qrecords.RecordRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        dataCompositionId_ = "";

        return this;
      }

      public Descriptor
          getDescriptorForType() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordRequest_descriptor;
      }

      public Qrecords.RecordRequest getDefaultInstanceForType() {
        return Qrecords.RecordRequest.getDefaultInstance();
      }

      public Qrecords.RecordRequest build() {
        Qrecords.RecordRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Qrecords.RecordRequest buildPartial() {
        Qrecords.RecordRequest result = new Qrecords.RecordRequest(this);
        result.dataCompositionId_ = dataCompositionId_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(Message other) {
        if (other instanceof Qrecords.RecordRequest) {
          return mergeFrom((Qrecords.RecordRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Qrecords.RecordRequest other) {
        if (other == Qrecords.RecordRequest.getDefaultInstance()) return this;
        if (!other.getDataCompositionId().isEmpty()) {
          dataCompositionId_ = other.dataCompositionId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws IOException {
        Qrecords.RecordRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (Qrecords.RecordRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object dataCompositionId_ = "";
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 1;</code>
       */
      public String getDataCompositionId() {
        Object ref = dataCompositionId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          dataCompositionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 1;</code>
       */
      public ByteString
          getDataCompositionIdBytes() {
        Object ref = dataCompositionId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          dataCompositionId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 1;</code>
       */
      public Builder setDataCompositionId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dataCompositionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 1;</code>
       */
      public Builder clearDataCompositionId() {
        
        dataCompositionId_ = getDefaultInstance().getDataCompositionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 1;</code>
       */
      public Builder setDataCompositionIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dataCompositionId_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.axoom.qrecords.RecordRequest)
    }

    // @@protoc_insertion_point(class_scope:com.axoom.qrecords.RecordRequest)
    private static final Qrecords.RecordRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Qrecords.RecordRequest();
    }

    public static Qrecords.RecordRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<RecordRequest>
        PARSER = new AbstractParser<RecordRequest>() {
      public RecordRequest parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new RecordRequest(input, extensionRegistry);
      }
    };

    public static Parser<RecordRequest> parser() {
      return PARSER;
    }

    @Override
    public Parser<RecordRequest> getParserForType() {
      return PARSER;
    }

    public Qrecords.RecordRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RecordListRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.axoom.qrecords.RecordListRequest)
      MessageOrBuilder {

    /**
     * <pre>
     * The client's ID; used for record load-balancing
     * </pre>
     *
     * <code>string clientId = 1;</code>
     */
    String getClientId();
    /**
     * <pre>
     * The client's ID; used for record load-balancing
     * </pre>
     *
     * <code>string clientId = 1;</code>
     */
    ByteString
        getClientIdBytes();

    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    String getDataCompositionId();
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    ByteString
        getDataCompositionIdBytes();

    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    boolean hasFrom();
    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    Timestamp getFrom();
    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    TimestampOrBuilder getFromOrBuilder();

    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    boolean hasTo();
    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    Timestamp getTo();
    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    TimestampOrBuilder getToOrBuilder();

    /**
     * <pre>
     * When the limit hits the stream will end
     * </pre>
     *
     * <code>int32 limit = 5;</code>
     */
    int getLimit();
  }
  /**
   * Protobuf type {@code com.axoom.qrecords.RecordListRequest}
   */
  public  static final class RecordListRequest extends
      GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.axoom.qrecords.RecordListRequest)
      RecordListRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecordListRequest.newBuilder() to construct.
    private RecordListRequest(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecordListRequest() {
      clientId_ = "";
      dataCompositionId_ = "";
      limit_ = 0;
    }

    @Override
    public final UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecordListRequest(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              clientId_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              dataCompositionId_ = s;
              break;
            }
            case 26: {
              Timestamp.Builder subBuilder = null;
              if (from_ != null) {
                subBuilder = from_.toBuilder();
              }
              from_ = input.readMessage(Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(from_);
                from_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              Timestamp.Builder subBuilder = null;
              if (to_ != null) {
                subBuilder = to_.toBuilder();
              }
              to_ = input.readMessage(Timestamp.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(to_);
                to_ = subBuilder.buildPartial();
              }

              break;
            }
            case 40: {

              limit_ = input.readInt32();
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (IOException e) {
        throw new InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptor
        getDescriptor() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordListRequest_descriptor;
    }

    protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Qrecords.internal_static_com_axoom_qrecords_RecordListRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Qrecords.RecordListRequest.class, Qrecords.RecordListRequest.Builder.class);
    }

    public static final int CLIENTID_FIELD_NUMBER = 1;
    private volatile Object clientId_;
    /**
     * <pre>
     * The client's ID; used for record load-balancing
     * </pre>
     *
     * <code>string clientId = 1;</code>
     */
    public String getClientId() {
      Object ref = clientId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        clientId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The client's ID; used for record load-balancing
     * </pre>
     *
     * <code>string clientId = 1;</code>
     */
    public ByteString
        getClientIdBytes() {
      Object ref = clientId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        clientId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int DATACOMPOSITIONID_FIELD_NUMBER = 2;
    private volatile Object dataCompositionId_;
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public String getDataCompositionId() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        dataCompositionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public ByteString
        getDataCompositionIdBytes() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        dataCompositionId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int FROM_FIELD_NUMBER = 3;
    private Timestamp from_;
    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public boolean hasFrom() {
      return from_ != null;
    }
    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public Timestamp getFrom() {
      return from_ == null ? Timestamp.getDefaultInstance() : from_;
    }
    /**
     * <pre>
     * The exclusive starting point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp from = 3;</code>
     */
    public TimestampOrBuilder getFromOrBuilder() {
      return getFrom();
    }

    public static final int TO_FIELD_NUMBER = 4;
    private Timestamp to_;
    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    public boolean hasTo() {
      return to_ != null;
    }
    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    public Timestamp getTo() {
      return to_ == null ? Timestamp.getDefaultInstance() : to_;
    }
    /**
     * <pre>
     * The inclusive ending point in nano seconds precision
     * </pre>
     *
     * <code>.google.protobuf.Timestamp to = 4;</code>
     */
    public TimestampOrBuilder getToOrBuilder() {
      return getTo();
    }

    public static final int LIMIT_FIELD_NUMBER = 5;
    private int limit_;
    /**
     * <pre>
     * When the limit hits the stream will end
     * </pre>
     *
     * <code>int32 limit = 5;</code>
     */
    public int getLimit() {
      return limit_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws IOException {
      if (!getClientIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 1, clientId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 2, dataCompositionId_);
      }
      if (from_ != null) {
        output.writeMessage(3, getFrom());
      }
      if (to_ != null) {
        output.writeMessage(4, getTo());
      }
      if (limit_ != 0) {
        output.writeInt32(5, limit_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getClientIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(1, clientId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(2, dataCompositionId_);
      }
      if (from_ != null) {
        size += CodedOutputStream
          .computeMessageSize(3, getFrom());
      }
      if (to_ != null) {
        size += CodedOutputStream
          .computeMessageSize(4, getTo());
      }
      if (limit_ != 0) {
        size += CodedOutputStream
          .computeInt32Size(5, limit_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Qrecords.RecordListRequest)) {
        return super.equals(obj);
      }
      Qrecords.RecordListRequest other = (Qrecords.RecordListRequest) obj;

      boolean result = true;
      result = result && getClientId()
          .equals(other.getClientId());
      result = result && getDataCompositionId()
          .equals(other.getDataCompositionId());
      result = result && (hasFrom() == other.hasFrom());
      if (hasFrom()) {
        result = result && getFrom()
            .equals(other.getFrom());
      }
      result = result && (hasTo() == other.hasTo());
      if (hasTo()) {
        result = result && getTo()
            .equals(other.getTo());
      }
      result = result && (getLimit()
          == other.getLimit());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLIENTID_FIELD_NUMBER;
      hash = (53 * hash) + getClientId().hashCode();
      hash = (37 * hash) + DATACOMPOSITIONID_FIELD_NUMBER;
      hash = (53 * hash) + getDataCompositionId().hashCode();
      if (hasFrom()) {
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
      }
      if (hasTo()) {
        hash = (37 * hash) + TO_FIELD_NUMBER;
        hash = (53 * hash) + getTo().hashCode();
      }
      hash = (37 * hash) + LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getLimit();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Qrecords.RecordListRequest parseFrom(
        ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordListRequest parseFrom(
        ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordListRequest parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordListRequest parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordListRequest parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.RecordListRequest parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.RecordListRequest parseFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordListRequest parseFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordListRequest parseDelimitedFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Qrecords.RecordListRequest parseDelimitedFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.RecordListRequest parseFrom(
        CodedInputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.RecordListRequest parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Qrecords.RecordListRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.axoom.qrecords.RecordListRequest}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.axoom.qrecords.RecordListRequest)
        Qrecords.RecordListRequestOrBuilder {
      public static final Descriptor
          getDescriptor() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordListRequest_descriptor;
      }

      protected GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordListRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Qrecords.RecordListRequest.class, Qrecords.RecordListRequest.Builder.class);
      }

      // Construct using Qrecords.RecordListRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        clientId_ = "";

        dataCompositionId_ = "";

        if (fromBuilder_ == null) {
          from_ = null;
        } else {
          from_ = null;
          fromBuilder_ = null;
        }
        if (toBuilder_ == null) {
          to_ = null;
        } else {
          to_ = null;
          toBuilder_ = null;
        }
        limit_ = 0;

        return this;
      }

      public Descriptor
          getDescriptorForType() {
        return Qrecords.internal_static_com_axoom_qrecords_RecordListRequest_descriptor;
      }

      public Qrecords.RecordListRequest getDefaultInstanceForType() {
        return Qrecords.RecordListRequest.getDefaultInstance();
      }

      public Qrecords.RecordListRequest build() {
        Qrecords.RecordListRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Qrecords.RecordListRequest buildPartial() {
        Qrecords.RecordListRequest result = new Qrecords.RecordListRequest(this);
        result.clientId_ = clientId_;
        result.dataCompositionId_ = dataCompositionId_;
        if (fromBuilder_ == null) {
          result.from_ = from_;
        } else {
          result.from_ = fromBuilder_.build();
        }
        if (toBuilder_ == null) {
          result.to_ = to_;
        } else {
          result.to_ = toBuilder_.build();
        }
        result.limit_ = limit_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(Message other) {
        if (other instanceof Qrecords.RecordListRequest) {
          return mergeFrom((Qrecords.RecordListRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Qrecords.RecordListRequest other) {
        if (other == Qrecords.RecordListRequest.getDefaultInstance()) return this;
        if (!other.getClientId().isEmpty()) {
          clientId_ = other.clientId_;
          onChanged();
        }
        if (!other.getDataCompositionId().isEmpty()) {
          dataCompositionId_ = other.dataCompositionId_;
          onChanged();
        }
        if (other.hasFrom()) {
          mergeFrom(other.getFrom());
        }
        if (other.hasTo()) {
          mergeTo(other.getTo());
        }
        if (other.getLimit() != 0) {
          setLimit(other.getLimit());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws IOException {
        Qrecords.RecordListRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (Qrecords.RecordListRequest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object clientId_ = "";
      /**
       * <pre>
       * The client's ID; used for record load-balancing
       * </pre>
       *
       * <code>string clientId = 1;</code>
       */
      public String getClientId() {
        Object ref = clientId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          clientId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The client's ID; used for record load-balancing
       * </pre>
       *
       * <code>string clientId = 1;</code>
       */
      public ByteString
          getClientIdBytes() {
        Object ref = clientId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          clientId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The client's ID; used for record load-balancing
       * </pre>
       *
       * <code>string clientId = 1;</code>
       */
      public Builder setClientId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        clientId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The client's ID; used for record load-balancing
       * </pre>
       *
       * <code>string clientId = 1;</code>
       */
      public Builder clearClientId() {
        
        clientId_ = getDefaultInstance().getClientId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The client's ID; used for record load-balancing
       * </pre>
       *
       * <code>string clientId = 1;</code>
       */
      public Builder setClientIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        clientId_ = value;
        onChanged();
        return this;
      }

      private Object dataCompositionId_ = "";
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public String getDataCompositionId() {
        Object ref = dataCompositionId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          dataCompositionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public ByteString
          getDataCompositionIdBytes() {
        Object ref = dataCompositionId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          dataCompositionId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dataCompositionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder clearDataCompositionId() {
        
        dataCompositionId_ = getDefaultInstance().getDataCompositionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dataCompositionId_ = value;
        onChanged();
        return this;
      }

      private Timestamp from_ = null;
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> fromBuilder_;
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public boolean hasFrom() {
        return fromBuilder_ != null || from_ != null;
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Timestamp getFrom() {
        if (fromBuilder_ == null) {
          return from_ == null ? Timestamp.getDefaultInstance() : from_;
        } else {
          return fromBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder setFrom(Timestamp value) {
        if (fromBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          from_ = value;
          onChanged();
        } else {
          fromBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder setFrom(
          Timestamp.Builder builderForValue) {
        if (fromBuilder_ == null) {
          from_ = builderForValue.build();
          onChanged();
        } else {
          fromBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder mergeFrom(Timestamp value) {
        if (fromBuilder_ == null) {
          if (from_ != null) {
            from_ =
              Timestamp.newBuilder(from_).mergeFrom(value).buildPartial();
          } else {
            from_ = value;
          }
          onChanged();
        } else {
          fromBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Builder clearFrom() {
        if (fromBuilder_ == null) {
          from_ = null;
          onChanged();
        } else {
          from_ = null;
          fromBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public Timestamp.Builder getFromBuilder() {
        
        onChanged();
        return getFromFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      public TimestampOrBuilder getFromOrBuilder() {
        if (fromBuilder_ != null) {
          return fromBuilder_.getMessageOrBuilder();
        } else {
          return from_ == null ?
              Timestamp.getDefaultInstance() : from_;
        }
      }
      /**
       * <pre>
       * The exclusive starting point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp from = 3;</code>
       */
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> 
          getFromFieldBuilder() {
        if (fromBuilder_ == null) {
          fromBuilder_ = new SingleFieldBuilderV3<
              Timestamp, Timestamp.Builder, TimestampOrBuilder>(
                  getFrom(),
                  getParentForChildren(),
                  isClean());
          from_ = null;
        }
        return fromBuilder_;
      }

      private Timestamp to_ = null;
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> toBuilder_;
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public boolean hasTo() {
        return toBuilder_ != null || to_ != null;
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Timestamp getTo() {
        if (toBuilder_ == null) {
          return to_ == null ? Timestamp.getDefaultInstance() : to_;
        } else {
          return toBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Builder setTo(Timestamp value) {
        if (toBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          to_ = value;
          onChanged();
        } else {
          toBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Builder setTo(
          Timestamp.Builder builderForValue) {
        if (toBuilder_ == null) {
          to_ = builderForValue.build();
          onChanged();
        } else {
          toBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Builder mergeTo(Timestamp value) {
        if (toBuilder_ == null) {
          if (to_ != null) {
            to_ =
              Timestamp.newBuilder(to_).mergeFrom(value).buildPartial();
          } else {
            to_ = value;
          }
          onChanged();
        } else {
          toBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Builder clearTo() {
        if (toBuilder_ == null) {
          to_ = null;
          onChanged();
        } else {
          to_ = null;
          toBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public Timestamp.Builder getToBuilder() {
        
        onChanged();
        return getToFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      public TimestampOrBuilder getToOrBuilder() {
        if (toBuilder_ != null) {
          return toBuilder_.getMessageOrBuilder();
        } else {
          return to_ == null ?
              Timestamp.getDefaultInstance() : to_;
        }
      }
      /**
       * <pre>
       * The inclusive ending point in nano seconds precision
       * </pre>
       *
       * <code>.google.protobuf.Timestamp to = 4;</code>
       */
      private SingleFieldBuilderV3<
          Timestamp, Timestamp.Builder, TimestampOrBuilder> 
          getToFieldBuilder() {
        if (toBuilder_ == null) {
          toBuilder_ = new SingleFieldBuilderV3<
              Timestamp, Timestamp.Builder, TimestampOrBuilder>(
                  getTo(),
                  getParentForChildren(),
                  isClean());
          to_ = null;
        }
        return toBuilder_;
      }

      private int limit_ ;
      /**
       * <pre>
       * When the limit hits the stream will end
       * </pre>
       *
       * <code>int32 limit = 5;</code>
       */
      public int getLimit() {
        return limit_;
      }
      /**
       * <pre>
       * When the limit hits the stream will end
       * </pre>
       *
       * <code>int32 limit = 5;</code>
       */
      public Builder setLimit(int value) {
        
        limit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When the limit hits the stream will end
       * </pre>
       *
       * <code>int32 limit = 5;</code>
       */
      public Builder clearLimit() {
        
        limit_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.axoom.qrecords.RecordListRequest)
    }

    // @@protoc_insertion_point(class_scope:com.axoom.qrecords.RecordListRequest)
    private static final Qrecords.RecordListRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Qrecords.RecordListRequest();
    }

    public static Qrecords.RecordListRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<RecordListRequest>
        PARSER = new AbstractParser<RecordListRequest>() {
      public RecordListRequest parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new RecordListRequest(input, extensionRegistry);
      }
    };

    public static Parser<RecordListRequest> parser() {
      return PARSER;
    }

    @Override
    public Parser<RecordListRequest> getParserForType() {
      return PARSER;
    }

    public Qrecords.RecordListRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QRecordOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.axoom.qrecords.QRecord)
      MessageOrBuilder {

    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    boolean hasHeaders();
    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    Qrecords.QRecordHeader getHeaders();
    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    Qrecords.QRecordHeaderOrBuilder getHeadersOrBuilder();

    /**
     * <code>bytes payload = 2;</code>
     */
    ByteString getPayload();
  }
  /**
   * Protobuf type {@code com.axoom.qrecords.QRecord}
   */
  public  static final class QRecord extends
      GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.axoom.qrecords.QRecord)
      QRecordOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QRecord.newBuilder() to construct.
    private QRecord(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QRecord() {
      payload_ = ByteString.EMPTY;
    }

    @Override
    public final UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QRecord(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              Qrecords.QRecordHeader.Builder subBuilder = null;
              if (headers_ != null) {
                subBuilder = headers_.toBuilder();
              }
              headers_ = input.readMessage(Qrecords.QRecordHeader.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(headers_);
                headers_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {

              payload_ = input.readBytes();
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (IOException e) {
        throw new InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptor
        getDescriptor() {
      return Qrecords.internal_static_com_axoom_qrecords_QRecord_descriptor;
    }

    protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Qrecords.internal_static_com_axoom_qrecords_QRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Qrecords.QRecord.class, Qrecords.QRecord.Builder.class);
    }

    public static final int HEADERS_FIELD_NUMBER = 1;
    private Qrecords.QRecordHeader headers_;
    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    public boolean hasHeaders() {
      return headers_ != null;
    }
    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    public Qrecords.QRecordHeader getHeaders() {
      return headers_ == null ? Qrecords.QRecordHeader.getDefaultInstance() : headers_;
    }
    /**
     * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
     */
    public Qrecords.QRecordHeaderOrBuilder getHeadersOrBuilder() {
      return getHeaders();
    }

    public static final int PAYLOAD_FIELD_NUMBER = 2;
    private ByteString payload_;
    /**
     * <code>bytes payload = 2;</code>
     */
    public ByteString getPayload() {
      return payload_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws IOException {
      if (headers_ != null) {
        output.writeMessage(1, getHeaders());
      }
      if (!payload_.isEmpty()) {
        output.writeBytes(2, payload_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (headers_ != null) {
        size += CodedOutputStream
          .computeMessageSize(1, getHeaders());
      }
      if (!payload_.isEmpty()) {
        size += CodedOutputStream
          .computeBytesSize(2, payload_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Qrecords.QRecord)) {
        return super.equals(obj);
      }
      Qrecords.QRecord other = (Qrecords.QRecord) obj;

      boolean result = true;
      result = result && (hasHeaders() == other.hasHeaders());
      if (hasHeaders()) {
        result = result && getHeaders()
            .equals(other.getHeaders());
      }
      result = result && getPayload()
          .equals(other.getPayload());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasHeaders()) {
        hash = (37 * hash) + HEADERS_FIELD_NUMBER;
        hash = (53 * hash) + getHeaders().hashCode();
      }
      hash = (37 * hash) + PAYLOAD_FIELD_NUMBER;
      hash = (53 * hash) + getPayload().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Qrecords.QRecord parseFrom(
        ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecord parseFrom(
        ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecord parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecord parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecord parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecord parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecord parseFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.QRecord parseFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.QRecord parseDelimitedFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Qrecords.QRecord parseDelimitedFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.QRecord parseFrom(
        CodedInputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.QRecord parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Qrecords.QRecord prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.axoom.qrecords.QRecord}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.axoom.qrecords.QRecord)
        Qrecords.QRecordOrBuilder {
      public static final Descriptor
          getDescriptor() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecord_descriptor;
      }

      protected GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecord_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Qrecords.QRecord.class, Qrecords.QRecord.Builder.class);
      }

      // Construct using Qrecords.QRecord.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (headersBuilder_ == null) {
          headers_ = null;
        } else {
          headers_ = null;
          headersBuilder_ = null;
        }
        payload_ = ByteString.EMPTY;

        return this;
      }

      public Descriptor
          getDescriptorForType() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecord_descriptor;
      }

      public Qrecords.QRecord getDefaultInstanceForType() {
        return Qrecords.QRecord.getDefaultInstance();
      }

      public Qrecords.QRecord build() {
        Qrecords.QRecord result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Qrecords.QRecord buildPartial() {
        Qrecords.QRecord result = new Qrecords.QRecord(this);
        if (headersBuilder_ == null) {
          result.headers_ = headers_;
        } else {
          result.headers_ = headersBuilder_.build();
        }
        result.payload_ = payload_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(Message other) {
        if (other instanceof Qrecords.QRecord) {
          return mergeFrom((Qrecords.QRecord)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Qrecords.QRecord other) {
        if (other == Qrecords.QRecord.getDefaultInstance()) return this;
        if (other.hasHeaders()) {
          mergeHeaders(other.getHeaders());
        }
        if (other.getPayload() != ByteString.EMPTY) {
          setPayload(other.getPayload());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws IOException {
        Qrecords.QRecord parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (Qrecords.QRecord) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Qrecords.QRecordHeader headers_ = null;
      private SingleFieldBuilderV3<
          Qrecords.QRecordHeader, Qrecords.QRecordHeader.Builder, Qrecords.QRecordHeaderOrBuilder> headersBuilder_;
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public boolean hasHeaders() {
        return headersBuilder_ != null || headers_ != null;
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Qrecords.QRecordHeader getHeaders() {
        if (headersBuilder_ == null) {
          return headers_ == null ? Qrecords.QRecordHeader.getDefaultInstance() : headers_;
        } else {
          return headersBuilder_.getMessage();
        }
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Builder setHeaders(Qrecords.QRecordHeader value) {
        if (headersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          headers_ = value;
          onChanged();
        } else {
          headersBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Builder setHeaders(
          Qrecords.QRecordHeader.Builder builderForValue) {
        if (headersBuilder_ == null) {
          headers_ = builderForValue.build();
          onChanged();
        } else {
          headersBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Builder mergeHeaders(Qrecords.QRecordHeader value) {
        if (headersBuilder_ == null) {
          if (headers_ != null) {
            headers_ =
              Qrecords.QRecordHeader.newBuilder(headers_).mergeFrom(value).buildPartial();
          } else {
            headers_ = value;
          }
          onChanged();
        } else {
          headersBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Builder clearHeaders() {
        if (headersBuilder_ == null) {
          headers_ = null;
          onChanged();
        } else {
          headers_ = null;
          headersBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Qrecords.QRecordHeader.Builder getHeadersBuilder() {
        
        onChanged();
        return getHeadersFieldBuilder().getBuilder();
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      public Qrecords.QRecordHeaderOrBuilder getHeadersOrBuilder() {
        if (headersBuilder_ != null) {
          return headersBuilder_.getMessageOrBuilder();
        } else {
          return headers_ == null ?
              Qrecords.QRecordHeader.getDefaultInstance() : headers_;
        }
      }
      /**
       * <code>.com.axoom.qrecords.QRecordHeader headers = 1;</code>
       */
      private SingleFieldBuilderV3<
          Qrecords.QRecordHeader, Qrecords.QRecordHeader.Builder, Qrecords.QRecordHeaderOrBuilder> 
          getHeadersFieldBuilder() {
        if (headersBuilder_ == null) {
          headersBuilder_ = new SingleFieldBuilderV3<
              Qrecords.QRecordHeader, Qrecords.QRecordHeader.Builder, Qrecords.QRecordHeaderOrBuilder>(
                  getHeaders(),
                  getParentForChildren(),
                  isClean());
          headers_ = null;
        }
        return headersBuilder_;
      }

      private ByteString payload_ = ByteString.EMPTY;
      /**
       * <code>bytes payload = 2;</code>
       */
      public ByteString getPayload() {
        return payload_;
      }
      /**
       * <code>bytes payload = 2;</code>
       */
      public Builder setPayload(ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>bytes payload = 2;</code>
       */
      public Builder clearPayload() {
        
        payload_ = getDefaultInstance().getPayload();
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.axoom.qrecords.QRecord)
    }

    // @@protoc_insertion_point(class_scope:com.axoom.qrecords.QRecord)
    private static final Qrecords.QRecord DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Qrecords.QRecord();
    }

    public static Qrecords.QRecord getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<QRecord>
        PARSER = new AbstractParser<QRecord>() {
      public QRecord parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new QRecord(input, extensionRegistry);
      }
    };

    public static Parser<QRecord> parser() {
      return PARSER;
    }

    @Override
    public Parser<QRecord> getParserForType() {
      return PARSER;
    }

    public Qrecords.QRecord getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QRecordHeaderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.axoom.qrecords.QRecordHeader)
      MessageOrBuilder {

    /**
     * <pre>
     * The unique record ID
     * </pre>
     *
     * <code>string recordId = 1;</code>
     */
    String getRecordId();
    /**
     * <pre>
     * The unique record ID
     * </pre>
     *
     * <code>string recordId = 1;</code>
     */
    ByteString
        getRecordIdBytes();

    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    String getDataCompositionId();
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    ByteString
        getDataCompositionIdBytes();

    /**
     * <pre>
     * The owner of the data composition
     * </pre>
     *
     * <code>string owner = 3;</code>
     */
    String getOwner();
    /**
     * <pre>
     * The owner of the data composition
     * </pre>
     *
     * <code>string owner = 3;</code>
     */
    ByteString
        getOwnerBytes();

    /**
     * <pre>
     * The url where the schema is located
     * </pre>
     *
     * <code>string schemaUrl = 4;</code>
     */
    String getSchemaUrl();
    /**
     * <pre>
     * The url where the schema is located
     * </pre>
     *
     * <code>string schemaUrl = 4;</code>
     */
    ByteString
        getSchemaUrlBytes();

    /**
     * <pre>
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>string timestamp = 5;</code>
     */
    String getTimestamp();
    /**
     * <pre>
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>string timestamp = 5;</code>
     */
    ByteString
        getTimestampBytes();
  }
  /**
   * Protobuf type {@code com.axoom.qrecords.QRecordHeader}
   */
  public  static final class QRecordHeader extends
      GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.axoom.qrecords.QRecordHeader)
      QRecordHeaderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QRecordHeader.newBuilder() to construct.
    private QRecordHeader(GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QRecordHeader() {
      recordId_ = "";
      dataCompositionId_ = "";
      owner_ = "";
      schemaUrl_ = "";
      timestamp_ = "";
    }

    @Override
    public final UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QRecordHeader(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      int mutable_bitField0_ = 0;
      UnknownFieldSet.Builder unknownFields =
          UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              String s = input.readStringRequireUtf8();

              recordId_ = s;
              break;
            }
            case 18: {
              String s = input.readStringRequireUtf8();

              dataCompositionId_ = s;
              break;
            }
            case 26: {
              String s = input.readStringRequireUtf8();

              owner_ = s;
              break;
            }
            case 34: {
              String s = input.readStringRequireUtf8();

              schemaUrl_ = s;
              break;
            }
            case 42: {
              String s = input.readStringRequireUtf8();

              timestamp_ = s;
              break;
            }
          }
        }
      } catch (InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (IOException e) {
        throw new InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final Descriptor
        getDescriptor() {
      return Qrecords.internal_static_com_axoom_qrecords_QRecordHeader_descriptor;
    }

    protected GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Qrecords.internal_static_com_axoom_qrecords_QRecordHeader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              Qrecords.QRecordHeader.class, Qrecords.QRecordHeader.Builder.class);
    }

    public static final int RECORDID_FIELD_NUMBER = 1;
    private volatile Object recordId_;
    /**
     * <pre>
     * The unique record ID
     * </pre>
     *
     * <code>string recordId = 1;</code>
     */
    public String getRecordId() {
      Object ref = recordId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        recordId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique record ID
     * </pre>
     *
     * <code>string recordId = 1;</code>
     */
    public ByteString
        getRecordIdBytes() {
      Object ref = recordId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        recordId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int DATACOMPOSITIONID_FIELD_NUMBER = 2;
    private volatile Object dataCompositionId_;
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public String getDataCompositionId() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        dataCompositionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The unique data composition ID
     * </pre>
     *
     * <code>string dataCompositionId = 2;</code>
     */
    public ByteString
        getDataCompositionIdBytes() {
      Object ref = dataCompositionId_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        dataCompositionId_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int OWNER_FIELD_NUMBER = 3;
    private volatile Object owner_;
    /**
     * <pre>
     * The owner of the data composition
     * </pre>
     *
     * <code>string owner = 3;</code>
     */
    public String getOwner() {
      Object ref = owner_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        owner_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The owner of the data composition
     * </pre>
     *
     * <code>string owner = 3;</code>
     */
    public ByteString
        getOwnerBytes() {
      Object ref = owner_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        owner_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int SCHEMAURL_FIELD_NUMBER = 4;
    private volatile Object schemaUrl_;
    /**
     * <pre>
     * The url where the schema is located
     * </pre>
     *
     * <code>string schemaUrl = 4;</code>
     */
    public String getSchemaUrl() {
      Object ref = schemaUrl_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        schemaUrl_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The url where the schema is located
     * </pre>
     *
     * <code>string schemaUrl = 4;</code>
     */
    public ByteString
        getSchemaUrlBytes() {
      Object ref = schemaUrl_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        schemaUrl_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 5;
    private volatile Object timestamp_;
    /**
     * <pre>
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>string timestamp = 5;</code>
     */
    public String getTimestamp() {
      Object ref = timestamp_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        ByteString bs = 
            (ByteString) ref;
        String s = bs.toStringUtf8();
        timestamp_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
     * </pre>
     *
     * <code>string timestamp = 5;</code>
     */
    public ByteString
        getTimestampBytes() {
      Object ref = timestamp_;
      if (ref instanceof String) {
        ByteString b = 
            ByteString.copyFromUtf8(
                (String) ref);
        timestamp_ = b;
        return b;
      } else {
        return (ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(CodedOutputStream output)
                        throws IOException {
      if (!getRecordIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 1, recordId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 2, dataCompositionId_);
      }
      if (!getOwnerBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 3, owner_);
      }
      if (!getSchemaUrlBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 4, schemaUrl_);
      }
      if (!getTimestampBytes().isEmpty()) {
        GeneratedMessageV3.writeString(output, 5, timestamp_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getRecordIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(1, recordId_);
      }
      if (!getDataCompositionIdBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(2, dataCompositionId_);
      }
      if (!getOwnerBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(3, owner_);
      }
      if (!getSchemaUrlBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(4, schemaUrl_);
      }
      if (!getTimestampBytes().isEmpty()) {
        size += GeneratedMessageV3.computeStringSize(5, timestamp_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @Override
    public boolean equals(final Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof Qrecords.QRecordHeader)) {
        return super.equals(obj);
      }
      Qrecords.QRecordHeader other = (Qrecords.QRecordHeader) obj;

      boolean result = true;
      result = result && getRecordId()
          .equals(other.getRecordId());
      result = result && getDataCompositionId()
          .equals(other.getDataCompositionId());
      result = result && getOwner()
          .equals(other.getOwner());
      result = result && getSchemaUrl()
          .equals(other.getSchemaUrl());
      result = result && getTimestamp()
          .equals(other.getTimestamp());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RECORDID_FIELD_NUMBER;
      hash = (53 * hash) + getRecordId().hashCode();
      hash = (37 * hash) + DATACOMPOSITIONID_FIELD_NUMBER;
      hash = (53 * hash) + getDataCompositionId().hashCode();
      hash = (37 * hash) + OWNER_FIELD_NUMBER;
      hash = (53 * hash) + getOwner().hashCode();
      hash = (37 * hash) + SCHEMAURL_FIELD_NUMBER;
      hash = (53 * hash) + getSchemaUrl().hashCode();
      hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
      hash = (53 * hash) + getTimestamp().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static Qrecords.QRecordHeader parseFrom(
        ByteBuffer data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecordHeader parseFrom(
        ByteBuffer data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecordHeader parseFrom(
        ByteString data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecordHeader parseFrom(
        ByteString data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecordHeader parseFrom(byte[] data)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static Qrecords.QRecordHeader parseFrom(
        byte[] data,
        ExtensionRegistryLite extensionRegistry)
        throws InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static Qrecords.QRecordHeader parseFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.QRecordHeader parseFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.QRecordHeader parseDelimitedFrom(InputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static Qrecords.QRecordHeader parseDelimitedFrom(
        InputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static Qrecords.QRecordHeader parseFrom(
        CodedInputStream input)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static Qrecords.QRecordHeader parseFrom(
        CodedInputStream input,
        ExtensionRegistryLite extensionRegistry)
        throws IOException {
      return GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Qrecords.QRecordHeader prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @Override
    protected Builder newBuilderForType(
        GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.axoom.qrecords.QRecordHeader}
     */
    public static final class Builder extends
        GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.axoom.qrecords.QRecordHeader)
        Qrecords.QRecordHeaderOrBuilder {
      public static final Descriptor
          getDescriptor() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecordHeader_descriptor;
      }

      protected GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecordHeader_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                Qrecords.QRecordHeader.class, Qrecords.QRecordHeader.Builder.class);
      }

      // Construct using Qrecords.QRecordHeader.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        recordId_ = "";

        dataCompositionId_ = "";

        owner_ = "";

        schemaUrl_ = "";

        timestamp_ = "";

        return this;
      }

      public Descriptor
          getDescriptorForType() {
        return Qrecords.internal_static_com_axoom_qrecords_QRecordHeader_descriptor;
      }

      public Qrecords.QRecordHeader getDefaultInstanceForType() {
        return Qrecords.QRecordHeader.getDefaultInstance();
      }

      public Qrecords.QRecordHeader build() {
        Qrecords.QRecordHeader result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public Qrecords.QRecordHeader buildPartial() {
        Qrecords.QRecordHeader result = new Qrecords.QRecordHeader(this);
        result.recordId_ = recordId_;
        result.dataCompositionId_ = dataCompositionId_;
        result.owner_ = owner_;
        result.schemaUrl_ = schemaUrl_;
        result.timestamp_ = timestamp_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(Message other) {
        if (other instanceof Qrecords.QRecordHeader) {
          return mergeFrom((Qrecords.QRecordHeader)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(Qrecords.QRecordHeader other) {
        if (other == Qrecords.QRecordHeader.getDefaultInstance()) return this;
        if (!other.getRecordId().isEmpty()) {
          recordId_ = other.recordId_;
          onChanged();
        }
        if (!other.getDataCompositionId().isEmpty()) {
          dataCompositionId_ = other.dataCompositionId_;
          onChanged();
        }
        if (!other.getOwner().isEmpty()) {
          owner_ = other.owner_;
          onChanged();
        }
        if (!other.getSchemaUrl().isEmpty()) {
          schemaUrl_ = other.schemaUrl_;
          onChanged();
        }
        if (!other.getTimestamp().isEmpty()) {
          timestamp_ = other.timestamp_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws IOException {
        Qrecords.QRecordHeader parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (InvalidProtocolBufferException e) {
          parsedMessage = (Qrecords.QRecordHeader) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private Object recordId_ = "";
      /**
       * <pre>
       * The unique record ID
       * </pre>
       *
       * <code>string recordId = 1;</code>
       */
      public String getRecordId() {
        Object ref = recordId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          recordId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The unique record ID
       * </pre>
       *
       * <code>string recordId = 1;</code>
       */
      public ByteString
          getRecordIdBytes() {
        Object ref = recordId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          recordId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique record ID
       * </pre>
       *
       * <code>string recordId = 1;</code>
       */
      public Builder setRecordId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        recordId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique record ID
       * </pre>
       *
       * <code>string recordId = 1;</code>
       */
      public Builder clearRecordId() {
        
        recordId_ = getDefaultInstance().getRecordId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique record ID
       * </pre>
       *
       * <code>string recordId = 1;</code>
       */
      public Builder setRecordIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        recordId_ = value;
        onChanged();
        return this;
      }

      private Object dataCompositionId_ = "";
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public String getDataCompositionId() {
        Object ref = dataCompositionId_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          dataCompositionId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public ByteString
          getDataCompositionIdBytes() {
        Object ref = dataCompositionId_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          dataCompositionId_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionId(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        dataCompositionId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder clearDataCompositionId() {
        
        dataCompositionId_ = getDefaultInstance().getDataCompositionId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The unique data composition ID
       * </pre>
       *
       * <code>string dataCompositionId = 2;</code>
       */
      public Builder setDataCompositionIdBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        dataCompositionId_ = value;
        onChanged();
        return this;
      }

      private Object owner_ = "";
      /**
       * <pre>
       * The owner of the data composition
       * </pre>
       *
       * <code>string owner = 3;</code>
       */
      public String getOwner() {
        Object ref = owner_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          owner_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The owner of the data composition
       * </pre>
       *
       * <code>string owner = 3;</code>
       */
      public ByteString
          getOwnerBytes() {
        Object ref = owner_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          owner_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The owner of the data composition
       * </pre>
       *
       * <code>string owner = 3;</code>
       */
      public Builder setOwner(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        owner_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The owner of the data composition
       * </pre>
       *
       * <code>string owner = 3;</code>
       */
      public Builder clearOwner() {
        
        owner_ = getDefaultInstance().getOwner();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The owner of the data composition
       * </pre>
       *
       * <code>string owner = 3;</code>
       */
      public Builder setOwnerBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        owner_ = value;
        onChanged();
        return this;
      }

      private Object schemaUrl_ = "";
      /**
       * <pre>
       * The url where the schema is located
       * </pre>
       *
       * <code>string schemaUrl = 4;</code>
       */
      public String getSchemaUrl() {
        Object ref = schemaUrl_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          schemaUrl_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * The url where the schema is located
       * </pre>
       *
       * <code>string schemaUrl = 4;</code>
       */
      public ByteString
          getSchemaUrlBytes() {
        Object ref = schemaUrl_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          schemaUrl_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * The url where the schema is located
       * </pre>
       *
       * <code>string schemaUrl = 4;</code>
       */
      public Builder setSchemaUrl(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        schemaUrl_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url where the schema is located
       * </pre>
       *
       * <code>string schemaUrl = 4;</code>
       */
      public Builder clearSchemaUrl() {
        
        schemaUrl_ = getDefaultInstance().getSchemaUrl();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The url where the schema is located
       * </pre>
       *
       * <code>string schemaUrl = 4;</code>
       */
      public Builder setSchemaUrlBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        schemaUrl_ = value;
        onChanged();
        return this;
      }

      private Object timestamp_ = "";
      /**
       * <pre>
       * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>string timestamp = 5;</code>
       */
      public String getTimestamp() {
        Object ref = timestamp_;
        if (!(ref instanceof String)) {
          ByteString bs =
              (ByteString) ref;
          String s = bs.toStringUtf8();
          timestamp_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <pre>
       * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>string timestamp = 5;</code>
       */
      public ByteString
          getTimestampBytes() {
        Object ref = timestamp_;
        if (ref instanceof String) {
          ByteString b = 
              ByteString.copyFromUtf8(
                  (String) ref);
          timestamp_ = b;
          return b;
        } else {
          return (ByteString) ref;
        }
      }
      /**
       * <pre>
       * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>string timestamp = 5;</code>
       */
      public Builder setTimestamp(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>string timestamp = 5;</code>
       */
      public Builder clearTimestamp() {
        
        timestamp_ = getDefaultInstance().getTimestamp();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Uses RFC 3339, where generated output will always be Z-normalized and uses 0, 3, 6 or 9 fractional digits. Offsets other than "Z" are also accepted (Example: 1972-01-01T10:00:20.021Z07:00).
       * </pre>
       *
       * <code>string timestamp = 5;</code>
       */
      public Builder setTimestampBytes(
          ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        timestamp_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.axoom.qrecords.QRecordHeader)
    }

    // @@protoc_insertion_point(class_scope:com.axoom.qrecords.QRecordHeader)
    private static final Qrecords.QRecordHeader DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Qrecords.QRecordHeader();
    }

    public static Qrecords.QRecordHeader getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final Parser<QRecordHeader>
        PARSER = new AbstractParser<QRecordHeader>() {
      public QRecordHeader parsePartialFrom(
          CodedInputStream input,
          ExtensionRegistryLite extensionRegistry)
          throws InvalidProtocolBufferException {
        return new QRecordHeader(input, extensionRegistry);
      }
    };

    public static Parser<QRecordHeader> parser() {
      return PARSER;
    }

    @Override
    public Parser<QRecordHeader> getParserForType() {
      return PARSER;
    }

    public Qrecords.QRecordHeader getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final Descriptor
    internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_com_axoom_qrecords_RecordStreamRequest_fieldAccessorTable;
  private static final Descriptor
    internal_static_com_axoom_qrecords_RecordRequest_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_com_axoom_qrecords_RecordRequest_fieldAccessorTable;
  private static final Descriptor
    internal_static_com_axoom_qrecords_RecordListRequest_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_com_axoom_qrecords_RecordListRequest_fieldAccessorTable;
  private static final Descriptor
    internal_static_com_axoom_qrecords_QRecord_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_com_axoom_qrecords_QRecord_fieldAccessorTable;
  private static final Descriptor
    internal_static_com_axoom_qrecords_QRecordHeader_descriptor;
  private static final 
    GeneratedMessageV3.FieldAccessorTable
      internal_static_com_axoom_qrecords_QRecordHeader_fieldAccessorTable;

  public static FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\016qrecords.proto\022\022com.axoom.qrecords\032\037go" +
      "ogle/protobuf/timestamp.proto\"|\n\023RecordS" +
      "treamRequest\022\017\n\007groupId\030\001 \001(\t\022\031\n\021dataCom" +
      "positionId\030\002 \001(\t\022(\n\004from\030\003 \001(\0132\032.google." +
      "protobuf.Timestamp\022\017\n\007timeout\030\004 \001(\r\"*\n\rR" +
      "ecordRequest\022\031\n\021dataCompositionId\030\001 \001(\t\"" +
      "\241\001\n\021RecordListRequest\022\020\n\010clientId\030\001 \001(\t\022" +
      "\031\n\021dataCompositionId\030\002 \001(\t\022(\n\004from\030\003 \001(\013" +
      "2\032.google.protobuf.Timestamp\022&\n\002to\030\004 \001(\013" +
      "2\032.google.protobuf.Timestamp\022\r\n\005limit\030\005 " +
      "\001(\005\"N\n\007QRecord\0222\n\007headers\030\001 \001(\0132!.com.ax" +
      "oom.qrecords.QRecordHeader\022\017\n\007payload\030\002 " +
      "\001(\014\"q\n\rQRecordHeader\022\020\n\010recordId\030\001 \001(\t\022\031" +
      "\n\021dataCompositionId\030\002 \001(\t\022\r\n\005owner\030\003 \001(\t" +
      "\022\021\n\tschemaUrl\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\t2\341" +
      "\002\n\010QRecords\022S\n\tGetStream\022\'.com.axoom.qre" +
      "cords.RecordStreamRequest\032\033.com.axoom.qr" +
      "ecords.QRecord0\001\022Q\n\017GetMaterialized\022!.co" +
      "m.axoom.qrecords.RecordRequest\032\033.com.axo" +
      "om.qrecords.QRecord\022V\n\016ListHistorical\022%." +
      "com.axoom.qrecords.RecordListRequest\032\033.c" +
      "om.axoom.qrecords.QRecord0\001\022U\n\023GetLatest" +
      "Historical\022!.com.axoom.qrecords.RecordRe" +
      "quest\032\033.com.axoom.qrecords.QRecordb\006prot" +
      "o3"
    };
    FileDescriptor.InternalDescriptorAssigner assigner =
        new FileDescriptor.    InternalDescriptorAssigner() {
          public ExtensionRegistry assignDescriptors(
              FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new FileDescriptor[] {
          TimestampProto.getDescriptor(),
        }, assigner);
    internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_axoom_qrecords_RecordStreamRequest_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_axoom_qrecords_RecordStreamRequest_descriptor,
        new String[] { "GroupId", "DataCompositionId", "From", "Timeout", });
    internal_static_com_axoom_qrecords_RecordRequest_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_axoom_qrecords_RecordRequest_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_axoom_qrecords_RecordRequest_descriptor,
        new String[] { "DataCompositionId", });
    internal_static_com_axoom_qrecords_RecordListRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_com_axoom_qrecords_RecordListRequest_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_axoom_qrecords_RecordListRequest_descriptor,
        new String[] { "ClientId", "DataCompositionId", "From", "To", "Limit", });
    internal_static_com_axoom_qrecords_QRecord_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_com_axoom_qrecords_QRecord_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_axoom_qrecords_QRecord_descriptor,
        new String[] { "Headers", "Payload", });
    internal_static_com_axoom_qrecords_QRecordHeader_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_com_axoom_qrecords_QRecordHeader_fieldAccessorTable = new
      GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_axoom_qrecords_QRecordHeader_descriptor,
        new String[] { "RecordId", "DataCompositionId", "Owner", "SchemaUrl", "Timestamp", });
    TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
